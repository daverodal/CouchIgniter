<?php if (!defined('BASEPATH')) exit('No direct script access allowed');
$dir = dirname(dirname(__DIR__));
require_once("$dir/vendor/autoload.php");
use GuzzleHttp\Client;
//$client = new Client([
//    // Base URI is used with relative requests
//    'base_uri' => 'http://httpbin.org',
//    // You can set any number of default request options.
//    'timeout'  => 2.0,
//]);
/**
 *
 * Copyright 2011-2015 David Rodal
 *
 *  This program is free software; you can redistribute it
 *  and/or modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation;
 *  either version 2 of the License, or (at your option) any later version
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/**
 * Created by JetBrains PhpStorm.
 * User: david rodal
 * Date: 10/17/11
 * Time: 5:00 PM
 * To change this template use File | Settings | File Templates.
 */

//require_once('Sag.php');
//require_once('SagFileCache.php');

/**
 * Couchsag codeigniter library to access Sag driver for couch db.
 * See Sag.php for more information...
 */
class Couchsag
{

//    public $sag;
    public $guzzle;
    public $currentDatabase;

    public function setDatabase($db){
        $this->currentDatabase = $db;
    }

    /**
     * @param $params Params to be passed to sag driver. Values can be
     * "host"
     * "port"
     * "database"
     * "user"
     * "password"
     * "auth_type" "AUTH_BASIC" or "AUTH_COOKIE";
     */
    public function __construct($params)
    {
        $host = "127.0.0.1";
        $port = 443;

        if (is_array($params)) {
            foreach ($params as $key => $value) {
                switch ($key) {
                    case 'host':
                        $host = $value;
                        break;
                    case 'port':
                        $port = $value;
                        break;
                    case 'user':
                        $user = $value;
                        break;
                    case 'password':
                        $password = $value;
                        break;
                    case 'auth_type':
                        $auth_type = $value;
                        break;
                    case 'database':
                        $database = $value;
                        break;
                }
            }
            $this->guzzle = new Client([
                // Base URI is used with relative requests
                'base_uri' => "http://$user:$password@$host:$port/",
                // You can set any number of default request options.
                'timeout'  => 1800.0,
            ]);
            if($database){
                $this->currentDatabase = $database;
            }
//            $this->sag = new Sag($host, $port);
//		$this->sag->setHttpAdapter('HTTP_CURL');
//            if ($password || $user || $auth_type) {
//                $this->sag->login($user, $password, $auth_type);
//            }
//            if ($database) {
//                $this->sag->setDatabase($database);
//            }
//            try {
////        $cache = new SagFileCache("/tmp");
//            } catch (Exception $e) {
//                throw $e;
//            }
////        $this->sag->setCache($cache);
        }
    }

    /**
     * @param $id the Id of the document to be fetched.
     * @return returns the document associated with the $id
     */

    function get($id)
    {
        $curDb = $this->currentDatabase;


        try {
//            $body = $this->sag->get($id)->body;
            if($id[0] !== '/'){
                $curDb .= '/';
            }
            $response = $this->guzzle->request('GET',"/".$curDb.$id);
            $body = json_decode((string)$response->getBody());
        } catch (Exception $e) {

            if($e->getCode() == 404){
                throw $e;
            }
            if ($e->getCode() == 402)
                return false;
            var_dump($e->getMessage());
            die("CouchException get");
        }
        return $body;
    }

    /**
     * @param int $count The number of unique id's to be generated.
     * @return returns a list of unique id's generated by couch db.
     */
    function uuids($count = 1)
    {
        return $this->sag->generateIDs($count);
    }

    /**
     * @param $id id of the document to be updated (via http PUT)
     * @param $the new data for the document
     * @return the response of the update
     */
    function update($id, $data)
    {
        try {
            $curDb = $this->currentDatabase;
            /* if $id has no leading slash add one to the mix */
            if($id[0] !== '/'){
                $curDb .= '/';
            }
            $dest = "/".$curDb.$id;
            $ret = $this->guzzle->request('PUT',$dest, ['json'=>$data]);
            $st = $ret->getStatusCode();
            return $st === 201;
//            return $this->sag->put($id, $data)->body;
        } catch (Exception $e) {
            var_dump($e->getMessage());
            die("CouchException Update");
        }
    }

    /**
     * @param $id The id of the document to be created (via http POST)
     * @param $data The data to be placed into the document
     * @return mixed The respons of the creation
     */
    function create($id, $data = null)
    {
        try {
            $curDb = $this->currentDatabase;
            /* if $id has no leading slash add one to the mix */

            if($data !== null && $id[0] !== '/'){
                $curDb .= '/';
                $dest = "/".$curDb.$id;
            }else{
                $dest = "/".$curDb;
                $data = $id;
            }
            $ret = $this->guzzle->request('POST',$dest, ['json'=>$data]);
            $body = (string)$ret->getBody();
            $ret->body = json_decode($body);
            return $ret;
//            return $this->sag->post($id, $data);
        } catch (Exception $e) {

          throw $e;
        }
    }

    /**
     *
     * @param $id The id of the document to be deleted
     * @param $rev
     * @return mixed the response of the deletion
     */
    function delete($id, $rev)
    {
        try {
            $curDb = $this->currentDatabase;
            $rev = urlencode($rev);
            $dest = "/$curDb/$id?rev=$rev";

            $response = $this->guzzle->request('DELETE',$dest);
            $st = $response->getStatusCode();
            return $st === 200;

//            return $this->sag->delete($id, $rev);
        } catch (Exception $e) {

            var_dump($e->getMessage());
            die("CouchException delete");
        }
    }
}
